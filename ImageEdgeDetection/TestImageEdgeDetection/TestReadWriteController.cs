using Microsoft.VisualStudio.TestTools.UnitTesting;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ImageEdgeDetection;
using System.Drawing;
using ImageEdgeDetection.IOFiles;
using ImageEdgeDetection.Business;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

namespace TestImageEdgeDetection
{
    [TestClass]
    public class TestReadWriteController
    {
        Bitmap testImg = new Bitmap("../../imagesForTesting/testImg.png");

        [TestMethod]
        public void testReadImg()
        {           
            var ioRepository = Substitute.For<IReadWriteController>();
            ioRepository.read().Returns<Bitmap>(testImg);

            var logicRepository = Substitute.For<ImageEdgeDetection.Business.ILogicController>();
            LogicController inputImage = new LogicController(ioRepository);           

            Bitmap test = inputImage.readImage(ioRepository);

            ImageConverter imageConverter = new ImageConverter();
            byte[] resBytes = (byte[])imageConverter.ConvertTo(testImg, typeof(byte[]));

            String res = "";

            Assert.AreEqual(BitConverter.ToString(resBytes), res);
            //compareTwoImages(test, testImg);
        }

        [TestMethod]
        public void testWriteImg()
        {
            var ioRepository = Substitute.For<ImageEdgeDetection.IOFiles.IReadWriteController>();

            ioRepository.write(new Bitmap("../../imagesForTesting/testImg.png"));
        }

        [TestMethod]
        public void testGaussian()
        {
            var logicRepository = Substitute.For<ImageEdgeDetection.Business.ILogicController>();

            logicRepository.gaussianEdge(null);
        }


        public void compareTwoImages(Bitmap bmp1, Bitmap bmp2)
        {
            //code from http://csharpexamples.com/c-fast-bitmap-compare/
            int bytes = bmp1.Width * bmp1.Height * (Image.GetPixelFormatSize(bmp1.PixelFormat) / 8);

            bool result = true;
            byte[] b1bytes = new byte[bytes];
            byte[] b2bytes = new byte[bytes];

            BitmapData bitmapData1 = bmp1.LockBits(new Rectangle(0, 0, bmp1.Width, bmp1.Height), ImageLockMode.ReadOnly, bmp1.PixelFormat);
            BitmapData bitmapData2 = bmp2.LockBits(new Rectangle(0, 0, bmp2.Width, bmp2.Height), ImageLockMode.ReadOnly, bmp2.PixelFormat);

            Marshal.Copy(bitmapData1.Scan0, b1bytes, 0, bytes);
            Marshal.Copy(bitmapData2.Scan0, b2bytes, 0, bytes);

            for (int n = 0; n <= bytes - 1; n++)
            {
                if (b1bytes[n] != b2bytes[n])
                {
                    result = false;
                    break;
                }
            }

            Assert.AreEqual(true, result);
            bmp1.UnlockBits(bitmapData1);
            bmp2.UnlockBits(bitmapData2);
        }

    }
}
    